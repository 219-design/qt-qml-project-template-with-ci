//
// Copyright (c) 2020, 219 Design, LLC
// See LICENSE.txt
//
// https://www.219design.com
// Software | Electrical | Mechanical | Product Design
//
#include "view_model_collection.h"

#include <QtQml/QQmlContext>

#include "autogenerated/version.h" // USE THIS SPARINGLY. IT CAN TRIGGER MANY REBUILDS.
#include "gui_tests.h"
#include "src/app/event_filter.h"
#include "src/lib_app/cli_options.h"
#include "src/lib_app/logging_tags.h"
#include "src/lib_app/resources.h"
#include "src/libstyles/resource_helper.h"
#include "src/util/qml_message_interceptor.h"
#include "src/util/usage_log_t.hpp"

namespace project
{
using str = std::string;

// clang-format off
ViewModelCollection::ViewModelCollection( const QCoreApplication& app, bool cliArgsOnlyParseThenSkipErrorHandling )
    : m_opts( std::make_unique<CliOptions>( app, cliArgsOnlyParseThenSkipErrorHandling ) ),
      m_eventFilter( std::make_unique<EventFilter>() ),
      m_qmlLogger( std::make_unique<QmlMessageInterceptor>( !m_opts->MaximumQtLogging() ) ),
      m_logging( std::make_unique<LoggingTags>( *m_opts ) )
// clang-format on
{
    project::initLibResources();

    // Do after the 'init..resource' calls, in case any ctor wants rsrcs:
    // m_navigation = std::make_unique<Navigation>();
}

ViewModelCollection::~ViewModelCollection() = default;

const CliOptions& ViewModelCollection::Options() const
{
    return *m_opts;
}

void ViewModelCollection::ExportContextPropertiesToQml( QQmlEngine* engine )
{
    // Sort of a "silly" demo usage of project::Log<>
    Log( str( "rootContext" ), engine )->rootContext()->setContextProperty( "versionInfoBuildDateString", BUILD_ON_DATE );
    // Another sort of "silly" demo usage of project::Log<>
    Log( str( "setContextProperty" ), engine->rootContext() )->setContextProperty( "versionInfoGitHash", GIT_HASH_WHEN_BUILT );
    fprintf( stderr, "GUI Build Info: %s %s\n", BUILD_ON_DATE, GIT_HASH_WHEN_BUILT );

    // m_navigation->ExportContextPropertiesToQml( engine );
    Log( str( "ExportContextPropertiesToQml" ), m_logging )->ExportContextPropertiesToQml( engine );
    ResourceHelper::ExportContextPropertiesToQml( engine );

    // Keep this at the END of the 'ExportContext...' method, so all view models are exported before any tests run
    if( Log( str( "RunningGuiTests" ), m_opts )->RunningGuiTests() )
    {
        m_guiTests = std::make_unique<GuiTests>( *engine );
    }
}

void ViewModelCollection::SetRootObject( QObject* object )
{
    m_eventFilter->FilterEventsDirectedAtThisObject( object );
}
} // namespace project
