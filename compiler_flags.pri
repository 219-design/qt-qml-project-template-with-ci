#
# Copyright (c) 2020, 219 Design, LLC
# See LICENSE.txt
#
# https://www.219design.com
# Software | Electrical | Mechanical | Product Design
#

linux:!android {
  greaterThan(QT_MAJOR_VERSION, 5) {
    QMAKE_CXX = g++-9
    QMAKE_LINK = g++-9
    QMAKE_CC = gcc-9
  } else {
    QMAKE_CXX = g++-7
    QMAKE_LINK = g++-7
    QMAKE_CC = gcc-7
  }
}

CONFIG += c++17

ios|macx {
    # the lines below suppress warnings generated by Qt's header files: we tell
    # Clang to treat Qt's (mac) Framework headers as "system headers":
    QMAKE_CXXFLAGS += -iframework $$[QT_INSTALL_LIBS]
    QMAKE_CXXFLAGS += -isystem $$[QT_INSTALL_LIBS]/QtCore.framework/Headers
}

!win32 {
  # the lines below suppress warnings generated by Qt's header files: we tell
  # GCC/Clang to treat Qt's headers as "system headers" with the -isystem flag
  QMAKE_CXXFLAGS += -isystem $$[QT_INSTALL_HEADERS]
  QMAKE_CXXFLAGS += -isystem $$[QT_INSTALL_HEADERS]/QtConcurrent
  QMAKE_CXXFLAGS += -isystem $$[QT_INSTALL_HEADERS]/QtCore
  QMAKE_CXXFLAGS += -isystem $$[QT_INSTALL_HEADERS]/QtGui
  QMAKE_CXXFLAGS += -isystem $$[QT_INSTALL_HEADERS]/QtHelp
  QMAKE_CXXFLAGS += -isystem $$[QT_INSTALL_HEADERS]/QtQml
  QMAKE_CXXFLAGS += -isystem $$[QT_INSTALL_HEADERS]/QtQmlDebug
  QMAKE_CXXFLAGS += -isystem $$[QT_INSTALL_HEADERS]/QtQmlModels
  QMAKE_CXXFLAGS += -isystem $$[QT_INSTALL_HEADERS]/QtQuick
  QMAKE_CXXFLAGS += -isystem $$[QT_INSTALL_HEADERS]/QtQuickControls2
  QMAKE_CXXFLAGS += -isystem $$[QT_INSTALL_HEADERS]/QtQuickWidgets
  QMAKE_CXXFLAGS += -isystem $$[QT_INSTALL_HEADERS]/QtTest
  QMAKE_CXXFLAGS += -isystem $$[QT_INSTALL_HEADERS]/QtWidgets
  QMAKE_CXXFLAGS += -isystem $$[QT_INSTALL_HEADERS]/QtXml

  lessThan(QT_MAJOR_VERSION, 6) {
      QMAKE_CXXFLAGS += -isystem $$[QT_INSTALL_HEADERS]/QtFontDatabaseSupport
  }


  unix:!android {
      # So the exe will launch if we put all our '*.so' dylibs side-by-side with it.
      # Based on https://stackoverflow.com/a/27393241/10278
      QMAKE_LFLAGS += "-Wl,-rpath,\'\$$ORIGIN\'"
  }

  linux:!android {
      QMAKE_CXXFLAGS += "\
           -Wduplicated-branches \
           -Wduplicated-cond \
           -Wlogical-op \
           -Wmisleading-indentation \
           -Wrestrict \
           -Wunused-but-set-parameter \
           "
  }

  !android {
      QMAKE_CXXFLAGS += "\
          -Werror \
          "
  }

  # some inspired by: https://kristerw.blogspot.com/2017/09/useful-gcc-warning-options-not-enabled.html
  # others inspired by: https://stackoverflow.com/questions/5088460/flags-to-enable-thorough-and-verbose-g-warnings
  QMAKE_CXXFLAGS += "\
       -Wall \
       -Wcast-align \
       -Wcast-qual \
       -Wconversion \
       -Wdisabled-optimization \
       -Werror=switch \
       -Wextra \
       -Wfloat-equal \
       -Wformat-nonliteral \
       -Wformat-security \
       -Wformat=2 \
       -Wimport \
       -Winit-self \
       -Winline \
       -Wmissing-declarations \
       -Wmissing-field-initializers \
       -Wmissing-format-attribute   \
       -Wmissing-include-dirs \
       -Wmissing-noreturn \
       -Wnon-virtual-dtor \
       -Wnull-dereference \
       -Wold-style-cast \
       -Wpedantic \
       -Wpointer-arith \
       -Wredundant-decls \
       -Wshadow \
       -Wstack-protector \
       -Wswitch-default \
       -Wswitch-enum \
       -Wundef  \
       -Wuninitialized \
       -Wunreachable-code \
       -Wunused \
       -Wunused-parameter \
       -Wvariadic-macros \
       -Wwrite-strings \
       "

  # Do the 'no-' flags in their own statement, to ensure that they always happen last:
  QMAKE_CXXFLAGS += "\
       -Wno-error=format-nonliteral \
       -Wno-error=inline \
       "
  # Rationale for 'Wno-error=format-nonliteral': we trigger this in rc/minutil/logger.cc (TODO: eventually suppress this ONLY for that cc file)
  # Rationale for 'Wno-error=inline' is that a failure to inline is information, and never truly 'wrong'
}

ios|macx {
    # Disable a couple that are more onerous to comply with on Mac
    QMAKE_CXXFLAGS += "\
        -Wno-error=missing-noreturn \
        -Wno-error=sign-conversion \
        "
}

!include($$top_srcdir/src/assert/assert.pri) { error() } # allows all code to include util-assert.h
